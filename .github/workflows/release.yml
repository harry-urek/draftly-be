name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
      - name: Validate tag format
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Invalid tag format: $TAG"
            exit 1
          fi
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [[ $TAG =~ -[a-zA-Z] ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    name: Build and Test for Release
    runs-on: ubuntu-latest
    needs: validate-tag
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Run full test suite
        run: npm run test:ci
        env:
          DATABASE_URL: mongodb://root:password@localhost:27017/draftly_test?authSource=admin
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          VERTEX_AI_PROJECT_ID: test-project
          GOOGLE_CLIENT_ID: test-client-id
          GOOGLE_CLIENT_SECRET: test-client-secret
          GOOGLE_REDIRECT_URI: http://localhost:3001/auth/oauth/google/callback
          TOKEN_ENCRYPTION_KEY: dGVzdC1lbmNyeXB0aW9uLWtleS0zMi1ieXRlcw==

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-build-${{ needs.validate-tag.outputs.version }}
          path: dist/
          retention-days: 30

  docker-build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate-tag, build-and-test]
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-tag
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          
          if [ -n "$PREVIOUS_TAG" ]; then
            RANGE="$PREVIOUS_TAG..$CURRENT_TAG"
          else
            RANGE="$CURRENT_TAG"
          fi
          
          # Generate changelog
          CHANGELOG="## üöÄ Release $CURRENT_TAG\n\n"
          
          # Get commits
          COMMITS=$(git log --pretty=format:"- %s (%h)" $RANGE --reverse)
          if [ -n "$COMMITS" ]; then
            CHANGELOG+="\n### üìù Changes\n$COMMITS\n"
          fi
          
          # Get contributors
          CONTRIBUTORS=$(git log --pretty=format:"%an" $RANGE | sort -u | grep -v "dependabot" | head -10)
          if [ -n "$CONTRIBUTORS" ]; then
            CHANGELOG+="\n### üë• Contributors\n"
            echo "$CONTRIBUTORS" | while read -r contributor; do
              CHANGELOG+="- $contributor\n"
            done
          fi
          
          # Save to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, build-and-test, docker-build-and-push, generate-changelog]
    permissions:
      contents: write
    steps:
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          name: Release ${{ needs.validate-tag.outputs.version }}
          body: |
            ${{ needs.generate-changelog.outputs.changelog }}
            
            ## üì¶ Docker Image
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-tag.outputs.version }}
            ```
            
            ## üîê Image Digest
            ```
            ${{ needs.docker-build-and-push.outputs.image-digest }}
            ```
            
            ## üìã Verification
            All tests passed ‚úÖ
            Security scans completed ‚úÖ
            Code quality checks passed ‚úÖ
          draft: false
          prerelease: ${{ needs.validate-tag.outputs.is-prerelease }}
          generateReleaseNotes: false
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-tag, create-release]
    if: needs.validate-tag.outputs.is-prerelease == 'false'
    environment:
      name: production
      url: https://draftly.yourdomain.com
    steps:
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying version ${{ needs.validate-tag.outputs.version }} to production..."
          # Add your production deployment commands here
          # For example:
          # - Update Kubernetes deployment
          # - Deploy to AWS ECS
          # - Update Docker Swarm service
          # - Deploy to Google Cloud Run
          echo "‚úÖ Production deployment completed!"

      - name: Post-deployment verification
        run: |
          echo "üîç Running post-deployment verification..."
          # Add health checks and verification commands here
          # curl -f https://draftly.yourdomain.com/health || exit 1
          echo "‚úÖ Post-deployment verification passed!"

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [validate-tag, create-release, deploy-production]
    if: success()
    steps:
      - name: Notify team
        run: |
          echo "üéâ Release ${{ needs.validate-tag.outputs.version }} deployed successfully!"
          # Add notification logic here (Slack, Discord, email, etc.)

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [validate-tag, build-and-test, docker-build-and-push, create-release, deploy-production]
    if: failure()
    steps:
      - name: Notify team of failure
        run: |
          echo "‚ùå Release ${{ needs.validate-tag.outputs.version }} deployment failed!"
          # Add failure notification logic here
